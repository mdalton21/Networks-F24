# and balance. These reflect preferential attachment and similarity for outgoing
# ties between actors
if (effect == "Jout") effects <- includeEffects(effects, Jout)
if (effect == "inPop") effects <- includeEffects(effects, inPop)
if (effect == "outInAss") effects <- includeEffects(effects, outInAss)
if (effect == "transTrip1") effects <- includeEffects(effects, transTrip1)
# Effects for homophily
effects <- includeEffects(effects, sameX, interaction1 = "aggression_var")
effects <- includeEffects(effects, sameX, interaction1 = "subfaction_var")
effects <- includeEffects(effects, sameX, interaction1 = "militia_var")
effects <- includeEffects(effects, sameX, interaction1 = "role_var")
# Define algorithm and get results
algorithm <- sienaAlgorithmCreate(projname = "output", seed = seed,
n3 = 3000, nsub = 7, firstg = 0.01)
results <- siena07(algorithm, data = data, effects = effects,
returnDeps = TRUE)
# Check for convergence
if (max(results$tstat > 1) | abs(results$tconv.max) > 0.25){
results <- siena07(algorithm, data = data, effects = effects,
returnDeps = TRUE, prevAns = results)
}
return(results)
}
# Edges in the first period
t0_network <- main_graph %>% # Edges in the first period
delete_edges(as.vector(E(postNet)))
# Edges in the second period
t1_network <- subgraph.edges(main_graph, as.vector(E(postNet)),
delete.vertices = FALSE)
# Make a list for joiner nodes
joiner_nodes <- as_tibble(as.vector(V(t0_network)$name)) %>%
mutate(node = row_number()) %>%
ungroup() %>%
relocate(node) %>%
filter(!(value %in% as.vector(V(preNet)$name))) %>%
pull(node)
# Make a list for all nodes and code them as being present in both periods
joiners <- rep(list(c(1, 2)), 151)
# Update periods for nodes that were only present in the second period
for (i in seq_along(joiners)){
if (i %in% joiner_nodes){ # Check to see if a node was a joiner in the second period
joiners[[i]][1] <- 2     # Recode the list to show joiners only in period 2
}
}
## Creates an RSiena object for joiners
joiners <- sienaCompositionChange(joiners)
## Create a dependent variable
dv <- sienaDependent(array(c(as.matrix(as_adjacency_matrix(t0_network)),
as.matrix(as_adjacency_matrix(main_graph))),
dim = c(151, 151, 2)))
## Create constant covariates objects
blocks <- readRDS(file.path(dat_dir, "blocks.rds"))
role_var <- coCovar(as.vector(blocks$best$best1$clu))
militia_var <- coCovar(as.vector(V(main_graph)$militia))
aggression_var <- coCovar(as.vector(V(main_graph)$aggression))
subfaction_var <- coCovar(as.vector(V(main_graph)$subfaction))
## Run models with different effects ---------------------------------------
# Effects for Jaccard out-degree, in degree popularity, out-in-degree
# assortativity, and transitive triples type 1
m1_results <- estimate_saom(Jout, 100)
m2_results <- estimate_saom(inPop, 200)
m3_results <- estimate_saom(outInAss, 300)
m4_results <- estimate_saom(transTrip1, 400)
plot(btergm::gof(m1_results), main=NULL)
png(file.path(fig_dir, "gof_m1.png"), res=100)
plot(btergm::gof(m1_results), main=NULL)
dev.off()
png(file.path(fig_dir, "gof_m2.png"), res=100)
plot(btergm::gof(m2_results), main=NULL)
dev.off()
png(file.path(fig_dir, "gof_m3.png"), res=100)
plot(btergm::gof(m3_results), main=NULL)
dev.off()
png(file.path(fig_dir, "gof_m4.png"), res=100)
plot(btergm::gof(m4_results), main=NULL)
png(file.path(fig_dir, "gof_m4.png"), res=100)
plot(btergm::gof(m4_results), main=NULL)
dev.off()
# Convert igraph to adjacency matrix
adj_matrix <- as_adjacency_matrix(main_graph, sparse = FALSE)
# Create a network object
drugNet <- network(adj_matrix, directed = is_directed(main_graph))
# Transfer vertex attributes
network::set.vertex.attribute(drugNet, "name", V(main_graph)$name)
network::set.vertex.attribute(drugNet, "aggression", V(main_graph)$aggression)
network::set.vertex.attribute(drugNet, "role", V(main_graph)$role)
network::set.vertex.attribute(drugNet, "militia", V(main_graph)$militia)
network::set.vertex.attribute(drugNet, "subfaction", V(main_graph)$subfaction)
# Transfer edge attributes
edge_list <- as_edgelist(main_graph)
edge_period <- E(main_graph)$period
network::set.edge.attribute(drugNet, "period", edge_period)
control <- control.ergm(MCMLE.maxit=50, seed=47)
set.seed(123)
ergm_mod <- ergm(drugNet ~ edges +
nodeicov("aggression") +
nodeocov("aggression") +
absdiff("aggression") +
nodeicov("militia") +
nodeocov("militia") +
absdiff("militia"),
control=control)
screenreg(ergm_mod)
drugNet
control <- control.ergm(MCMLE.maxit=50, seed=47)
set.seed(123)
ergm_mod <- ergm(drugNet ~ edges +
nodeicov("aggression") +
nodeocov("aggression") +
absdiff("aggression") +
nodeicov("subfaction") +
nodeocov("subfaction") +
absdiff("subfaction") +
nodeicov("militia") +
nodeocov("militia") +
absdiff("militia") +
nodeicov("role") +
nodeocov("role") +
absdiff("role"),
control=control)
drugNet
V(drugNet)
V(main_graph)
V(main_graph)$role
ergm_mod <- ergm(drugNet ~ edges +
nodeicov("aggression") +
nodeocov("aggression") +
absdiff("aggression") +
nodeicov("subfaction") +
nodeocov("subfaction") +
absdiff("subfaction") +
nodeicov("militia") +
nodeocov("militia") +
absdiff("militia") +
nodematch("role"),
control=control)
screenreg(ergm_mod)
V(main_graph)$subfaction
ergm_mod <- ergm(drugNet ~ edges +
nodeicov("aggression") +
nodeocov("aggression") +
absdiff("aggression") +
nodematch("subfaction") +
nodeicov("militia") +
nodeocov("militia") +
absdiff("militia") +
nodematch("role"),
control=control)
screenreg(ergm_mod)
ergm_mod <- ergm(drugNet ~ edges +
nodeicov("aggression") +
nodeocov("aggression") +
absdiff("aggression") +
nodemix("subfaction") +
nodeicov("militia") +
nodeocov("militia") +
absdiff("militia") +
nodematch("role"),
control=control)
screenreg(ergm_mod)
ergm_mod <- ergm(drugNet ~ edges +
nodeicov("aggression") +
nodeocov("aggression") +
absdiff("aggression") +
nodeicov("subfaction") +
nodeocov("subfaction") +
absdiff("subfaction") +
nodeicov("militia") +
nodeocov("militia") +
absdiff("militia") +
nodematch("role"),
control=control)
screenreg(ergm_mod)
set.seed(123)
ergm_mod_DD <- ergm::ergm(drugNet ~ edges +
nodemix("militia") +
absdiff("aggression") +
mutual +
isolates +
gwesp(0, fixed=T),
control = control)
set.seed(123)
ergm_mod_DD <- ergm::ergm(drugNet ~ edges +
absdiff("aggression") +
nodemix("subfaction") +
nodemix("militia") +
nodematch("role") +
mutual +
isolates +
gwesp(0, fixed=T),
control = control)
screenreg(ergm_mod_DD)
## Create a regression table -----------------------------------------------
texreg(l = list(ergm_mod, ergm_mod_DD))#,
screenreg(ergm_mod, ergm_mod_DD)
screenreg(l = list(ergm_mod, ergm_mod_DD))
screenreg(ergm_mod)
texreg(ergm_mod,
omit.coef = "basic rate parameter dv",
custom.coef.map = list("edges" = "Edges",
"nodeicov.aggression" = "Receiver Aggression",
"nodeocov.aggression" = "Sender Aggression",
"absdiff.aggression" = "Aggression Difference",
"nodeicov.subfaction" = "Receiver Subfaction",
"nodeocov.subfaction" = "Sender Subfaction",
"absdiff.subfaction" = "Subfaction Difference",
"nodeicov.militia" = "Receiver Militia",
"nodeocov.militia" = "Sender Militia",
"absdiff.militia" = "Militia Difference",
"nodematch.role" = "Role Homophily"),
main = "Table 2. Baseline ERGM Model Estimates")
?texreg
texreg(ergm_mod,
omit.coef = "basic rate parameter dv",
custom.coef.map = list("edges" = "Edges",
"nodeicov.aggression" = "Receiver Aggression",
"nodeocov.aggression" = "Sender Aggression",
"absdiff.aggression" = "Aggression Difference",
"nodeicov.subfaction" = "Receiver Subfaction",
"nodeocov.subfaction" = "Sender Subfaction",
"absdiff.subfaction" = "Subfaction Difference",
"nodeicov.militia" = "Receiver Militia",
"nodeocov.militia" = "Sender Militia",
"absdiff.militia" = "Militia Difference",
"nodematch.role" = "Role Homophily"),
main = "Table 2. Baseline ERGM Model Estimates",
label = "tab:ergm-baseline",
caption = " ",
file = file.path(tab_dir, "ergm_baseline.tex"))
texreg(ergm_mod,
omit.coef = "basic rate parameter dv",
custom.coef.map = list("edges" = "Edges",
"nodeicov.aggression" = "Receiver Aggression",
"nodeocov.aggression" = "Sender Aggression",
"absdiff.aggression" = "Aggression Difference",
"nodeicov.subfaction" = "Receiver Subfaction",
"nodeocov.subfaction" = "Sender Subfaction",
"absdiff.subfaction" = "Subfaction Difference",
"nodeicov.militia" = "Receiver Militia",
"nodeocov.militia" = "Sender Militia",
"absdiff.militia" = "Militia Difference",
"nodematch.role" = "Role Homophily"),
label = "tab:ergm-baseline",
caption = "Table 2. Baseline ERGM Model Estimates",
file = file.path(tab_dir, "ergm_baseline.tex"))
texreg(ergm_mod,
omit.coef = "basic rate parameter dv",
custom.coef.map = list("edges" = "Edges",
"nodeicov.aggression" = "Receiver Aggression",
"nodeocov.aggression" = "Sender Aggression",
"absdiff.aggression" = "Aggression Difference",
"nodeicov.subfaction" = "Receiver Subfaction",
"nodeocov.subfaction" = "Sender Subfaction",
"absdiff.subfaction" = "Subfaction Difference",
"nodeicov.militia" = "Receiver Militia",
"nodeocov.militia" = "Sender Militia",
"absdiff.militia" = "Militia Difference",
"nodematch.role" = "Role Homophily"),
label = "tab:ergm-baseline",
caption = "Baseline ERGM Model Estimates",
file = file.path(tab_dir, "ergm_baseline.tex"))
texreg(ergm_mod,
omit.coef = "basic rate parameter dv",
custom.coef.map = list("edges" = "Edges",
"nodeicov.aggression" = "Receiver Aggression",
"nodeocov.aggression" = "Sender Aggression",
"absdiff.aggression" = "Aggression Difference",
"nodeicov.subfaction" = "Receiver Subfaction",
"nodeocov.subfaction" = "Sender Subfaction",
"absdiff.subfaction" = "Subfaction Difference",
"nodeicov.militia" = "Receiver Militia",
"nodeocov.militia" = "Sender Militia",
"absdiff.militia" = "Militia Difference",
"nodematch.role" = "Role Homophily"),
label = "tab:ergm-baseline",
file = file.path(tab_dir, "ergm_baseline.tex"))
screenreg(ergm_mod_DD)
set.seed(123)
ergm_mod_DD <- ergm::ergm(drugNet ~ edges +
absdiff("aggression") +
nodematch("subfaction") +
nodematch("militia") +
nodematch("role") +
mutual +
isolates +
gwesp(0, fixed=T),
control = control)
screenreg(ergm_mod_DD)
texreg(ergm_mod_DD,
omit.coef = "basic rate parameter dv",
custom.coef.map = list("edges" = "Edges",
"absdiff.aggression" = "Aggression Difference",
"nodematch.subfaction" = "Subfaction Homophily",
"nodematch.militia" = "Militia Homophily",
"nodematch.role" = "Role Homophily",
"mutual" = "Mutuality",
"isolates" = "Isolates",
"gwesp.OTP.fixed.0" = "gwesp"),
label = "tab:ergm-DD",
file = file.path(tab_dir, "ergm_DD.tex"))
png(file.path(fig_dir, "mcmc_dd.png"), res=100)
mcmc.diagnostics(ergm_mod_DD, which="plots")
dev.off()
png(file.path(fig_dir, "gof_ergm.png"), res=100)
plot(gof(ergm_mod), main=NULL)
png(file.path(fig_dir, "gof_ergm.png"), res=100)
plot(gof(ergm_mod), main=NULL)
plot(gof(ergm_mod), main=NULL)
dev.off()
plot(gof(ergm_mod), main=NULL)
gof(ergm_mod)
plot(gof(ergm_mod), main=NULL)
par(mfrow=c(3,2))
plot(gof(ergm_mod), main=NULL)
plot(gof(ergm_mod_DD), main=NULL)
knitr::opts_chunk$set(echo = FALSE)
## GOF Diagnostics --------------------------------------------------
par(mfrow=c(3,2))
plot(gof(ergm_mod), main=NULL)
## GOF Diagnostics --------------------------------------------------
par(mfrow=c(3,2))
plot(gof(ergm_mod), main=NULL)
dev.off()
## GOF Diagnostics --------------------------------------------------
par(mfrow=c(3,2))
plot(gof(ergm_mod), main=NULL)
ergm_mod
network::list.vertex.attributes(drugNet)
summary(drugNet)
summary(drugNet %v% "aggression")
summary(drugNet %v% "subfaction")
summary(drugNet %v% "militia")
table(drugNet %v% "role", useNA = "ifany")
gof_result <- gof(ergm_mod)
plot(gof_result)
control <- control.ergm(MCMLE.maxit=50, seed=47)
set.seed(123)
ergm_mod <- ergm(drugNet ~ edges +
nodeicov("aggression") +
nodeocov("aggression") +
absdiff("aggression") +
nodeicov("subfaction") +
nodeocov("subfaction") +
absdiff("subfaction") +
nodeicov("militia") +
nodeocov("militia") +
absdiff("militia") +
nodematch("role") +
idegree + odegree,
control=control)
control <- control.ergm(MCMLE.maxit=50, seed=47)
set.seed(123)
ergm_mod <- ergm(drugNet ~ edges +
nodeicov("aggression") +
nodeocov("aggression") +
absdiff("aggression") +
nodeicov("subfaction") +
nodeocov("subfaction") +
absdiff("subfaction") +
nodeicov("militia") +
nodeocov("militia") +
absdiff("militia") +
nodematch("role"),
control=control)
plot(ergm::gof(ergm_mod), main=NULL)
par(mfrow=c(3,2))
plot(ergm::gof(ergm_mod), main=NULL)
plot(gof(ergm_mod_DD), main=NULL)
ergm::gof(ergm_mod)
?gof
drugNet
plot(btergm::gof(ergm_mod), main=NULL)
png(file.path(fig_dir, "gof_ergm.png"), res=100)
plot(btergm::gof(ergm_mod), main=NULL)
dev.off()
png(file.path(fig_dir, "gof_dd.png"), res=100)
plot(gof(btergm::ergm_mod_DD), main=NULL)
png(file.path(fig_dir, "mcmc_dd.png"), res=200)
mcmc.diagnostics(ergm_mod_DD, which="plots")
dev.off()
?png
png(file.path(fig_dir, "mcmc_dd.png"))
mcmc.diagnostics(ergm_mod_DD, which="plots")
dev.off()
png(file.path(fig_dir, "gof_ergm.png"))
plot(btergm::gof(ergm_mod), main=NULL)
dev.off()
png(file.path(fig_dir, "gof_dd.png"))
plot(gof(btergm::ergm_mod_DD), main=NULL)
plot(gof(btergm::ergm_mod_DD), main=NULL)
set.seed(123)
ergm_mod_DD <- ergm(drugNet ~ edges +
absdiff("aggression") +
nodematch("subfaction") +
nodematch("militia") +
nodematch("role") +
mutual +
isolates +
gwesp(0, fixed=T),
control = control)
screenreg(ergm_mod_DD)
plot(gof(btergm::ergm_mod_DD), main=NULL)
set.seed(123)
ergm_mod_DD <- btergm::ergm(drugNet ~ edges +
absdiff("aggression") +
nodematch("subfaction") +
nodematch("militia") +
nodematch("role") +
mutual +
isolates +
gwesp(0, fixed=T),
control = control)
png(file.path(fig_dir, "gof_dd.png"))
plot(gof(btergm::gof(ergm_mod_DD)), main=NULL)
set.seed(123)
ergm_mod_DD <- ergm::ergm(drugNet ~ edges +
absdiff("aggression") +
nodematch("subfaction") +
nodematch("militia") +
nodematch("role") +
mutual +
isolates +
gwesp(0, fixed=T),
control = control)
screenreg(ergm_mod_DD)
png(file.path(fig_dir, "gof_dd.png"))
plot(gof(btergm::gof(ergm_mod_DD)), main=NULL)
plot(gof(ergm::gof(ergm_mod_DD)), main=NULL)
class(ergm_mod_DD)
gof(ergm::gof(ergm_mod_DD)
)
gof(btergm::gof(ergm_mod_DD))
gof_result <- gof(ergm_mod_DD, GOF = c("degree", "distance", "espartners", "dspartners"))
?gof
gof_result <- gof(ergm_mod_DD, statistics = c(deg, esp, dsp))
gof_result <- btergm::gof(ergm_mod_DD, statistics = c(deg, esp, dsp))
gof_result <- btergm::gof(ergm_mod_DD, statistics = c(dsp, esp, deg))
gof_result <- btergm::gof(ergm_mod_DD, statistics = c(esp, deg))
gof_result <- btergm::gof(ergm_mod_DD)
plot(gof_result)
plot(gof_result)
png(file.path(fig_dir, "gof_dd.png"))
plot(gof_result)
dev.off()
png(file.path(fig_dir, "gof_dd.png"))
plot(btergm::gof(ergm_mod_DD))
dev.off()
png(file.path(fig_dir, "mcmc_dd.png"))
mcmc.diagnostics(ergm_mod_DD, which="plots")
dev.off()
mcmc.diagnostics(ergm_mod_DD, which="plots")
dev.off()
mcmc.diagnostics(ergm_mod_DD, which="plots")
png(file.path(fig_dir, "mcmc_dd.png"))
mcmc.diagnostics(ergm_mod_DD, which="plots")
dev.off()
# Formatting for split-halves test
d1 <- STFormat(combined_matrix)
# Running split-halves contagion test
simmodels <- lag_pc_test(d1, 1000, 1, T, 0.05,
1, F)
summary(simmodels)
# Summary of models
simmodels <- as.data.frame(simmodels)
names(simmodels) <- c("intercept","t-1coef","counterpart")
# Calculate contagion signal
xmean <- mean(simmodels$counterpart) ## input this in the plot
xmean <- round(xmean, digits = 4)
# P-value of the signal (proportion of results < 0)
pval <- sum(simmodels$counterpart < 0) / 1000  ## pvalue
pval <- round(pval, digits = 3)
density_graph(simmodels, 1000, xmean, 1, xmean, 0.5,
title = "Cartel In-Fighting")
png(file.path(fig_dir, "contagion.png"))
density_graph(simmodels, 1000, xmean, 1, xmean, 0.5,
title = "Cartel In-Fighting")
dev.off()
## Create a regression table -----------------------------------------------
texreg(ergm_mod_DD,
omit.coef = "basic rate parameter dv",
custom.coef.map = list("edges" = "Edges",
"absdiff.aggression" = "Aggression Difference",
"nodematch.subfaction" = "Subfaction Homophily",
"nodematch.militia" = "Militia Homophily",
"nodematch.role" = "Role Homophily",
"mutual" = "Mutuality",
"isolates" = "Isolates",
"gwesp.OTP.fixed.0" = "Transitivity (gwesp)"),
label = "tab:ergm-DD",
file = file.path(tab_dir, "ergm_DD.tex"))
exp(-1.63)
1-exp(-1.63)
screenreg(ergm_mod_DD)
?gwesp
??gwesp
exp(0.11)
exp(1.15)
## Create a regression table -----------------------------------------------
texreg(ergm_mod_DD,
omit.coef = "basic rate parameter dv",
custom.coef.map = list("edges" = "Edges",
"absdiff.aggression" = "Aggression Difference",
"nodematch.subfaction" = "Subfaction Homophily",
"nodematch.militia" = "Militia Homophily",
"nodematch.role" = "Role Homophily",
"mutual" = "Reciprocity",
"isolates" = "Isolates",
"gwesp.OTP.fixed.0" = "Transitivity (gwesp)"),
label = "tab:ergm-DD",
file = file.path(tab_dir, "ergm_DD.tex"))
exp(1.04)
screenreg(ergm_mod_DD)
